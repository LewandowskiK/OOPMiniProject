//CEOGUI.java
//Krystian Lewandowski
/*This program contains all the code necessary to display the options available to the CEO through a GUI*/

import javax.swing.*;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class CEOGUI extends JFrame {

    //global JButton array for button listener
    JButton[] jButtons = new JButton[5];

    public CEOGUI(){
        //set title to 'welcome CEO'
        super("Welcome CEO");

        //set border layout
        setLayout(new BorderLayout(0,0));

        //make window appear in center of screen
        setLocationRelativeTo(null);

        //set size of the window
        setSize(260,240);

        //set window to not resizable
        setResizable(false);

        //create a JPanel that will display the options available to the CEO
        JPanel optionsPanel = new JPanel();
        optionsPanel.setSize(260,220);

        //initialise a buttonEventHandler handler
        ButtonEventHandler handler = new ButtonEventHandler();

        //create a JMenu for 'Log out' option with mnemonic 'L'
        JMenu logout = new JMenu("Log Out");
        logout.setMnemonic(KeyEvent.VK_L);
        //anonymous menu listener generated by JCreator with some user code to log out
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!MIGHT ADD A WINDOW LISTENER INSTEAD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        logout.addMenuListener(new MenuListener() {
            @Override
            public void menuSelected(MenuEvent e) {
                //if the user says he wants to log out the code executes else, nothing happens
                if(JOptionPane.showConfirmDialog(null,"Would you like to log out?")==0){
                    dispose();
                    new LoginGUI();
                }
            }
            //required for MenuListener, no functionality
            public void menuDeselected(MenuEvent e) {}
            public void menuCanceled(MenuEvent e) {}
        });

        //create a JMenuBar
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        menuBar.setBackground(Color.lightGray);
        menuBar.add(logout);

        JLabel textLabel = new JLabel("What would you like to do?");
        optionsPanel.add(textLabel);

        //create and add a 'add department' JButton to the global array, set a mnemonic 'D' and add the buttonEventHandler
        JButton addDepartment = new JButton("Add Department");
        jButtons[0] = addDepartment;
        jButtons[0].setMnemonic(KeyEvent.VK_D);
        jButtons[0].setDisplayedMnemonicIndex(4);
        jButtons[0].addActionListener(handler);
        optionsPanel.add(jButtons[0]);

        //create and add a 'add manager' JButton to the global array, set a mnemonic 'M' and add the buttonEventHandler
        JButton addManager = new JButton("Add Manager");
        jButtons[1] = addManager;
        jButtons[1].setMnemonic(KeyEvent.VK_M);
        jButtons[1].addActionListener(handler);
        optionsPanel.add(jButtons[1]);

        //create and add a 'remove department' JButton to the global array
        JButton removeDepartment = new JButton("Remove Department");
        jButtons[2] = removeDepartment;
        jButtons[2].addActionListener(handler);
        optionsPanel.add(jButtons[2]);

        //create and add a 'remove manager' JButton to the global array
        JButton removeManager = new JButton("Remove Manager");
        jButtons[3] = removeManager;
        jButtons[3].addActionListener(handler);
        optionsPanel.add(jButtons[3]);

        //create and add a 'list Department Details' JButton to the global array
        JButton listDepartments = new JButton("List Department Details");
        jButtons[4] = listDepartments;
        jButtons[4].addActionListener(handler);
        optionsPanel.add(jButtons[4]);


        //add the options panel to the Center of the JFrame
        add(optionsPanel,BorderLayout.CENTER);

        //set default close operation and visibility of the window
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
    }

    public static void main(String[] args) {
        new CEOGUI();
    }

    private class ButtonEventHandler implements ActionListener{
        public void actionPerformed(ActionEvent e) {
            if(e.getSource()==jButtons[0]){
                new addDepartmentGUI();
            }
            else if(e.getSource()==jButtons[1]){
                new addManagerGUI();
            }
            else if(e.getSource()==jButtons[2]){
                //removeDepartment
            }
            else if(e.getSource()==jButtons[3]){
                //removeManager();
            }
            else{
                //if at least one department was added
                if(Driver.departments.size()>0){
                    int choice = JOptionPane.showConfirmDialog(null,"Would you like to list all departments?");
                    switch (choice){
                        case 0:
                            //User clicks yes, all departments are listed
                            String output = "";
                            for(Department department : Driver.departments)
                                output += department + "\n\n";

                            JOptionPane.showMessageDialog(null,output,"All Departments",JOptionPane.INFORMATION_MESSAGE);
                            break;

                        case 1:
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! MIGHT ADD A GUI COMBO BOX INSTEAD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            //user clicks no, a search query is asked from the user
                            String query = JOptionPane.showInputDialog("Please enter the name of the department you are searching for");
                            //an array for the queried departments and a counter are initialized
                            Department[] queriedDepartments = new Department[Driver.departments.size()];
                            int counter = 0;

                            for(Department department : Driver.departments)
                                if(department.getDepartmentName().toLowerCase().equals(query.toLowerCase())){
                                    queriedDepartments[counter] = department;
                                    counter++;
                                }

                            if(counter==0){
                                //no department found
                                JOptionPane.showMessageDialog(null,"No department with that name was found!","Query not Found",JOptionPane.INFORMATION_MESSAGE);
                            }
                            else if(counter==1){
                                //only one department found
                                JOptionPane.showMessageDialog(null,"Department details as follows:\n\n" + queriedDepartments[0],"Department Found",JOptionPane.INFORMATION_MESSAGE);
                            }
                            else{
                                //more than one department found
                                int index = 1;
                                output = "";
                                for(Department department : queriedDepartments){
                                    if(department != null){
                                        output += "Index: " + index + "   Department Name: " + department.getDepartmentName() + "\n";
                                    }
                                    else
                                        //we hit a null value in the array, every next value is also blank, therefore terminate loop
                                        /* a for each loop is used because theoretically you could have to go through the entire array
                                         * if the user inputs 'a' or something similar */
                                        break;
                                }
                                String input = JOptionPane.showInputDialog(output + "\n\nPlease enter one of the indices above to select the department");
                                while (!validIndex(counter,input)){
                                    input = JOptionPane.showInputDialog(output +"\n\nInvalid Index entered!" + "\nPlease re-enter one of the indices above");
                                }
                                //-1 to get the actual index of the item
                                index = Integer.parseInt(input) - 1;
                                JOptionPane.showMessageDialog(null,"Displaying the stats for " + queriedDepartments[index].getDepartmentName() + " Department:\n\n" );
                            }
                            break;
                            //end of switch
                    }
                }
                else{
                    //no departments created yet
                    JOptionPane.showMessageDialog(null,"Please add at least one department before attempting to search for departments","No departments Present",JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }
    //private method to determine whether the user has inputted an available index in department query
    private boolean validIndex(int counter, String input){
        boolean valid = false;
        int i;
        for(i = 0; i < input.length(); i++){
            if(!Character.isDigit(input.charAt(i)))
                break;
        }

        if(i==input.length()){
            int index = Integer.parseInt(input);
            //if the index selected is not within the counter(amount of departments queried) loop does not validate
            if(index<=counter && index>0)
                valid = true;
        }

        return valid;
    }
}
