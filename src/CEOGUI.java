//CEOGUI.java
//Krystian Lewandowski
/*This program contains all the code necessary to display the options available to the CEO through a GUI*/

import javax.swing.*;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

public class CEOGUI extends JFrame {

    //global JButton array for button listener
    JButton[] jButtons = new JButton[5];

    public CEOGUI(){
        //set title to 'welcome CEO'
        super("Welcome CEO");

        //set border layout
        setLayout(new BorderLayout(0,0));

        //make window appear in center of screen
        setLocationRelativeTo(null);

        //set size of the window
        setSize(260,220);

        //set window to not resizable
        setResizable(false);

        //create a JPanel that will display the options available to the CEO
        JPanel optionsPanel = new JPanel();
        optionsPanel.setSize(260,200);

        //initialise a buttonEventHandler handler
        ButtonEventHandler handler = new ButtonEventHandler();

        //create a JMenu for 'Log out' option with mnemonic 'L'
        JMenu logout = new JMenu("Log Out");
        logout.setMnemonic(KeyEvent.VK_L);
        //menu listener generated by JCreator with some user code to log out
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!MIGHT ADD A WINDOW LISTENER INSTEAD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        logout.addMenuListener(new MenuListener() {
            @Override
            public void menuSelected(MenuEvent e) {
                //if the user says he wants to log out the code executes else, nothing happens
                if(JOptionPane.showConfirmDialog(null,"Would you like to log out?")==0){
                    dispose();
                    new LoginGUI();
                }
            }
            //required for MenuListener, no functionality
            public void menuDeselected(MenuEvent e) {}
            public void menuCanceled(MenuEvent e) {}
        });

        //create a JMenuBar
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        menuBar.setBackground(Color.lightGray);
        menuBar.add(logout);

        JLabel textLabel = new JLabel("What would you like to do?");
        optionsPanel.add(textLabel);

        //create and add the 'add department' JButton to the global array, set a mnemonic 'D' and add the buttonEventHandler
        JButton addDepartment = new JButton("Add Department");
        jButtons[0] = addDepartment;
        jButtons[0].setMnemonic(KeyEvent.VK_D);
        jButtons[0].setDisplayedMnemonicIndex(4);
        jButtons[0].addActionListener(handler);
        optionsPanel.add(jButtons[0]);

        //create and add the 'add manager' JButton to the global array, set a mnemonic 'M' and add the buttonEventHandler
        JButton addManager = new JButton("Add Manager");
        jButtons[1] = addManager;
        jButtons[1].setMnemonic(KeyEvent.VK_M);
        jButtons[1].addActionListener(handler);
        optionsPanel.add(jButtons[1]);

        //create and add the 'add department' JButton to the global array
        JButton removeDepartment = new JButton("Remove Department");
        jButtons[2] = removeDepartment;
        jButtons[2].addActionListener(handler);
        optionsPanel.add(jButtons[2]);

        //create and add the 'add manager' JButton to the global array
        JButton removeManager = new JButton("Remove Manager");
        jButtons[3] = removeManager;
        jButtons[3].addActionListener(handler);
        optionsPanel.add(jButtons[3]);


        //add the options panel to the Center of the JFrame
        add(optionsPanel,BorderLayout.CENTER);

        //set default close operation and visibility of the window
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
    }

    public static void main(String[] args) {
        new CEOGUI();
    }

    private class ButtonEventHandler implements ActionListener{
        public void actionPerformed(ActionEvent e) {
            if(e.getSource()==jButtons[0]){
                new addDepartmentGUI();
            }
            else if(e.getSource()==jButtons[1]){
                new addManagerGUI();
            }
        }
    }
}
