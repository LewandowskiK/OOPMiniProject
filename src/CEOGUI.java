//CEOGUI.java
//Krystian Lewandowski
/*This program contains all the code necessary to display the options available to the CEO through a GUI*/

import javax.swing.*;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import java.awt.*;
import java.awt.event.*;
import java.util.Iterator;

public class CEOGUI extends JFrame implements WindowListener {

    //JButton array for button listener
    JButton[] jButtons = new JButton[6];

    public CEOGUI(){
        //set title to 'welcome CEO'
        super("Welcome CEO");

        //set border layout
        setLayout(new BorderLayout(0,0));

        //make window appear in center of screen
        setLocationRelativeTo(null);

        //set size of the window
        setSize(260,270);

        //set window to not resizable
        setResizable(false);

        //create a JPanel that will display the options available to the CEO
        JPanel optionsPanel = new JPanel();
        optionsPanel.setSize(260,220);

        //initialise a buttonEventHandler handler
        ButtonEventHandler handler = new ButtonEventHandler();

        //create a JMenu for 'Log out' option with mnemonic 'L'
        JMenu logout = new JMenu("Log Out");
        logout.setMnemonic(KeyEvent.VK_L);
        //anonymous menu listener generated by JCreator with some user code to log out
        logout.addMenuListener(new MenuListener() {
            @Override
            public void menuSelected(MenuEvent e) {
                //if the user says he wants to log out the code executes else, nothing happens
                if(JOptionPane.showConfirmDialog(null,"Would you like to log out?")==0){
                    dispose();
                    new LoginGUI();
                }
            }
            //required for MenuListener, no functionality
            public void menuDeselected(MenuEvent e) {}
            public void menuCanceled(MenuEvent e) {}
        });

        //create a JMenuBar
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        menuBar.setBackground(Color.lightGray);
        menuBar.add(logout);

        JLabel textLabel = new JLabel("What would you like to do?");
        optionsPanel.add(textLabel);

        //create and add a 'add department' JButton to the global array, set a mnemonic 'D' and add the buttonEventHandler
        JButton addDepartment = new JButton("Add Department");
        jButtons[0] = addDepartment;
        jButtons[0].setMnemonic(KeyEvent.VK_D);
        jButtons[0].setDisplayedMnemonicIndex(4);
        jButtons[0].addActionListener(handler);
        optionsPanel.add(jButtons[0]);

        //create and add a 'add manager' JButton to the global array, set a mnemonic 'M' and add the buttonEventHandler
        JButton addManager = new JButton("Add Manager");
        jButtons[1] = addManager;
        jButtons[1].setMnemonic(KeyEvent.VK_M);
        jButtons[1].addActionListener(handler);
        optionsPanel.add(jButtons[1]);

        //create and add a 'remove department' JButton to the global array
        JButton removeDepartment = new JButton("Remove Department");
        jButtons[2] = removeDepartment;
        jButtons[2].addActionListener(handler);
        optionsPanel.add(jButtons[2]);

        //create and add a 'remove manager' JButton to the global array
        JButton removeManager = new JButton("Remove Manager");
        jButtons[3] = removeManager;
        jButtons[3].addActionListener(handler);
        optionsPanel.add(jButtons[3]);

        //create and add a 'list Department Details' JButton to the global array
        JButton listDepartments = new JButton("List Department Details");
        jButtons[4] = listDepartments;
        jButtons[4].addActionListener(handler);
        optionsPanel.add(jButtons[4]);

        //create and add a 'list Department Details' JButton to the global array
        JButton listManagers = new JButton("List Manager Details");
        jButtons[5] = listManagers;
        jButtons[5].addActionListener(handler);
        optionsPanel.add(jButtons[5]);


        //add the options panel to the Center of the JFrame
        add(optionsPanel,BorderLayout.CENTER);

        //add Window Listener and visibility of the window
        addWindowListener(this);
        setVisible(true);
    }

    //window Listener code to the main windows to ask the user if s/he wants to save the data to file
    //duplicated in LoginGUI, ManagerGUI and CEOGUI
    public void windowOpened(WindowEvent e){}
    public void windowClosing(WindowEvent e){
        if(JOptionPane.showConfirmDialog(null,"Would you like to save all the data to file?","Save to File?",JOptionPane.YES_NO_OPTION)==0){
            Driver.saveToFile();
        }
        dispose();
    }
    public void windowClosed(WindowEvent e){}
    public void windowIconified(WindowEvent e){}
    public void windowDeiconified(WindowEvent e){}
    public void windowActivated(WindowEvent e){}
    public void windowDeactivated(WindowEvent e){}

    private class ButtonEventHandler implements ActionListener{
        public void actionPerformed(ActionEvent e) {
            if(e.getSource()==jButtons[0]){
                new addDepartmentGUI();
            }
            else if(e.getSource()==jButtons[1]){
                new addManagerGUI();
            }
            else if(e.getSource()==jButtons[2]){
                //if there are departments
                if(Driver.departments.size()>0){
                    //user defined method
                    removeDepartment();
                }
                else{
                    JOptionPane.showMessageDialog(null,"No departments exist yet","No Departments Found",JOptionPane.INFORMATION_MESSAGE);
                }

            }
            else if(e.getSource()==jButtons[3]){
                //if there are managers
                if(Driver.managers.size()>0){
                    //user defined method
                    removeManager();
                }
                else{
                    JOptionPane.showMessageDialog(null,"No managers exist yet","No Managers Found",JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else if(e.getSource()==jButtons[4]){
                searchDepartments();
            }
            else {
                searchManagers();
            }
        }
    }

    //method to determine whether the user has inputted an available index in department query
    private boolean validIndex(int maxIndex, String input){
        boolean valid = false;
        int i;
        for(i = 0; i < input.length(); i++){
            if(!Character.isDigit(input.charAt(i)))
                break;
        }

        if(i==input.length()){
            int index = Integer.parseInt(input);
            //if the index selected is not within the maxIndex(amount of departments queried) loop does not validate
            if(index<=maxIndex && index>0)
                valid = true;
        }
        return valid;
    }

    private void searchDepartments(){
        //if at least one department was added
        if(Driver.departments.size()>0){
            int choice = JOptionPane.showConfirmDialog(null,"Would you like to list all departments?");
            switch (choice){
                case 0:
                    //User clicks yes, all departments are listed
                    listAllDepartments();
                    break;
                case 1:
                    //user clicks no, a search query is asked from the user
                    listOneDepartment();
                    break;
                //end of switch
            }
        }
        else{
            //no departments created yet
            JOptionPane.showMessageDialog(null,"Please add at least one department before attempting to search for departments","No departments Present",JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void listAllDepartments(){
        String output = "";
        for(Department department : Driver.departments){
            output += "\nName:" + department.getDepartmentName() + "\nManager: " + department.getDepartmentManager().getName() + "\nNo of employees: " + department.getDepartmentWorkers().size();
        }


        JOptionPane.showMessageDialog(null,output,"All Departments",JOptionPane.INFORMATION_MESSAGE);
    }

    private void listOneDepartment(){
        String query = JOptionPane.showInputDialog("Please enter the name of the department you are searching for");
        //an array for the queried departments and a counter are initialized
        Department[] queriedDepartments = new Department[Driver.departments.size()];
        int counter = 0;

        for(Department department : Driver.departments)
            if(department.getDepartmentName().toLowerCase().contains(query.toLowerCase())){
                queriedDepartments[counter] = department;
                counter++;
            }
        if(counter==0){
            //no department found
            JOptionPane.showMessageDialog(null,"No department similar to '" + query + "' was found!","Query not Found",JOptionPane.INFORMATION_MESSAGE);
        }
        else if(counter==1){
            //only one department found
            JOptionPane.showMessageDialog(null,"Department details as follows:\n\n" + queriedDepartments[0],"Department Found",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            //more than one department found
            int index = 1;
            String output = "";
            for(Department department : queriedDepartments){
                if(department != null){
                    output += "Index: " + index + "   Department Name: " + department.getDepartmentName() + "\n";
                }
                else {
                    //we hit a null value in the array, every next value is also blank, therefore terminate loop
                    /* a for each loop is used because theoretically you could have to go through the entire array
                     * if the user inputs 'a' or something similar */
                    break;
                }
            }
            String input = JOptionPane.showInputDialog(output + "\n\nPlease enter one of the indices above to select the department");
            while (input!=null && !validIndex(counter,input)){
                input = JOptionPane.showInputDialog(output +"\n\nInvalid Index entered!" + "\nPlease re-enter one of the indices above");
            }
            //-1 to get the actual index of the item
            index = Integer.parseInt(input) - 1;
            JOptionPane.showMessageDialog(null,"Displaying the stats for " + queriedDepartments[index].getDepartmentName() + " Department:\n\n" + queriedDepartments[index] );
        }
    }

    //user made method to display managers
    private void searchManagers(){
        int choice = JOptionPane.showConfirmDialog(null,"Would you like to list all managers?");
        if(Driver.managers.size()>0){
            switch (choice){
                case 0:
                    //method very similar to search departments, not defined separately
                    String output = "Details of managers:\n\n";
                    for(Manager manager : Driver.managers){
                        output += manager + "\n\n";
                    }
                    JOptionPane.showMessageDialog(null,output,"Listing all managers",JOptionPane.INFORMATION_MESSAGE);
                    break;
                case 1:
                    listOneManager();
                    break;
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"No managers assigned yet.","No managers present",JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void listOneManager() {
        String query = JOptionPane.showInputDialog("Please enter the name of the department you are searching for");
        //an array for the queried managers and a counter are initialized
        Manager[] queriedManagers = new Manager[Driver.managers.size()];
        int counter = 0;

        for (Manager manager : Driver.managers)
            if (manager.getName().toLowerCase().contains(query.toLowerCase())) {
                queriedManagers[counter] = manager;
                counter++;
            }
        if (counter == 0) {
            //no manager found
            JOptionPane.showMessageDialog(null, "No manager similar to '" + query + "' was found!", "Query not Found", JOptionPane.INFORMATION_MESSAGE);
        } else if (counter == 1) {
            //only one manager found
            JOptionPane.showMessageDialog(null, "Manager details as follows:\n\n" + queriedManagers[0], "Manager Found", JOptionPane.INFORMATION_MESSAGE);
        } else {
            //more than one manager found
            int index = 1;
            String output = "";
            for (Manager manager : queriedManagers) {
                if (manager != null) {
                    output += "Index: " + index + "   Manager Name: " + manager.getName() + "\n";
                }
                else {
                    //we hit a null value in the array, every next value is also blank, therefore terminate loop
                    /* a for each loop is used because theoretically you could have to go through the entire array
                     * if the user inputs 'a' or something similar */
                    break;
                }
            }
            String input = JOptionPane.showInputDialog(output + "\n\nPlease enter one of the indices above to select the manager");
            while (input!=null && !validIndex(counter, input)) {
                input = JOptionPane.showInputDialog(output + "\n\nInvalid Index entered!" + "\nPlease re-enter one of the indices above");
            }
            //-1 to get the actual index of the item
            index = Integer.parseInt(input) - 1;
            JOptionPane.showMessageDialog(null, "Displaying the stats for Manager:\n\n" + queriedManagers[index]);
        }
    }

    //user-defined method to remove a department from the global array. Doing so will also remove the department manager and all of its employees
    private void removeDepartment(){
        String allDepartments = "";
        for(int i = 0; i < Driver.departments.size(); i++)
            allDepartments += "\nIndex: " + (i+1) + "     Department Name: " + Driver.departments.get(i).getDepartmentName();

        String input = JOptionPane.showInputDialog(null,"Please input which department to remove: \n" + allDepartments,"Select Department",JOptionPane.PLAIN_MESSAGE);
        while(input != null && !validIndex(Driver.departments.size(),input)){
            input = JOptionPane.showInputDialog(null,"Invalid Input!\n\nPlease input which department to remove: \n" + allDepartments,"Select Department",JOptionPane.PLAIN_MESSAGE);
        }
        int departmentIndex = Integer.parseInt(input)-1;

        //-1 for actual index
        if(JOptionPane.showConfirmDialog(null,"You are about to remove this department, its manager, and all its employees:\n\n" + Driver.departments.get(departmentIndex) + "\n\nProceed?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION)==0){

            //if it does not equal the no argument constructors default name
            if(Driver.departments.get(departmentIndex).getDepartmentManager().getName() != "No manager assigned"){
                //manager definitely exists, might be the only manager in the array
                int managerIndex = 0;
                for(Manager manager : Driver.managers){
                    if(manager.getName().equals(Driver.departments.get(departmentIndex).getDepartmentManager().getName())){
                        //manager found and the index is the current index
                        break;
                    }
                    //otherwise increment the index
                    managerIndex++;
                }
                Driver.managers.remove(managerIndex);
                Driver.departments.get(departmentIndex).setDepartmentManager(null);
            }
            //if the department has employees
            if(Driver.departments.get(departmentIndex).getDepartmentWorkers().size()!=0){
                String departmentName = Driver.departments.get(departmentIndex).getDepartmentName();

                /*****************************************************
                 *    Title: Java remove multiple objects from ArrayList
                 *    Author: N/A
                 *    Site owner/sponsor: javadeveloperzone.com
                 *    Date: 2018/Feb/18
                 *    Code version: N/A
                 *    Availability: https://javadeveloperzone.com/java-basic/java-remove-multiple-objects-from-arraylist/ (Accessed 03 Dec 2020)
                 *    Modified: Converted to use incorporate objects
                 *****************************************************/
                //code below was adapted by me from the site ---section 3---
                Iterator<Worker> iterator = Driver.workers.iterator();
                while(iterator.hasNext()){
                    Worker employee = iterator.next();
                    if(employee.getDepartment().equals(departmentName)){
                        iterator.remove();
                    }
                }
                //end of reference
            }

            Driver.departments.remove(departmentIndex);
            JOptionPane.showMessageDialog(null,"Department Removed!","Confirmation",JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void removeManager(){
        String allManagers = "";
        //managers only exist if they have a department to manage
        for(int i = 0; i < Driver.managers.size(); i++){
            allManagers += "\nIndex: " + (i+1) + "    Manager Name: " + Driver.managers.get(i).getName() + "    Department: " + Driver.managers.get(i).getPosition();
        }

        String input = JOptionPane.showInputDialog(null,"Please input which manager to remove: \n" + allManagers,"Select Manager",JOptionPane.PLAIN_MESSAGE);
        while(input!=null && !validIndex(Driver.departments.size(),input)){
            input = JOptionPane.showInputDialog(null,"Invalid Input!\n\nPlease input which manager to remove: \n" + allManagers,"Select Manager",JOptionPane.PLAIN_MESSAGE);
        }
        //-1 to get the actual index
        int managerIndex = Integer.parseInt(input)-1;

        //if the user confirms he wants to remove the manager
        if(JOptionPane.showConfirmDialog(null,"You are about to remove the following Manager:\n\n " + Driver.managers.get(managerIndex) + "\nProceed?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION)==0){
            int departmentIndex = 0;
            String departmentName = Driver.managers.get(managerIndex).getDepartment().getDepartmentName();
            for(Department department : Driver.departments){
                if(department.getDepartmentName().equals(departmentName)){
                    //found the correct index
                    break;
                }
                //else iterate the index
                departmentIndex++;
            }
            //set the department he is managing to unmanaged again
            Driver.departments.get(departmentIndex).setDepartmentManager(new Manager());
            //remove the manager
            Driver.managers.remove(managerIndex);
            JOptionPane.showMessageDialog(null,"Manager Removed","Confirmation",JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
